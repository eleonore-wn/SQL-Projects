-- Cleaning Data in SQL Queries
-- Utilizing Global Layoffs Stats
-----------------------------------------------------------------------
-- https://www.kaggle.com/datasets/swaptr/layoffs-2022
-----------------------------------------------------------------------


USE world_layoffs;

SELECT * FROM world_layoffs.layoffs;

-- 1. Create layoffs staging table to avoid working on the original raw data 
-- 2. Remove any duplicates 
-- 3. Standardize the data 
-- 4. NULL / Blank values 
-- 5. Remove any unneeded columns / rows 

CREATE TABLE layoffs_staging
LIKE layoffs;

-- Insert data from og table
INSERT layoffs_staging
SELECT * 
FROM layoffs;

SELECT 
    *
FROM
    layoffs_staging;

-- Begin the removal of duplicates
-- Use row_number to match agaisnt all the columns and identify possible duplicates
SELECT *, 
ROW_NUMBER() OVER(
PARTITION BY company, location, industry, total_laid_off, 
percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num 
FROM layoffs_staging;

-- Use CTE to single out duplicates
WITH duplicate_cte AS
(
SELECT *, 
ROW_NUMBER() OVER(
PARTITION BY company, location, industry, total_laid_off, 
percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num 
FROM layoffs_staging
)
SELECT * FROM duplicate_cte
WHERE row_num > 1;

-- Anything greater than 1 will be a duplicate. 
-- Select a company from the results to check

SELECT 
    *
FROM
    layoffs_staging
WHERE
    company = 'Casper';

-- Because MySQL Workbench doesnt allow DELETE from a CTE / Duplicate CTE
-- The most efficient way would be to duplicate the layoffs staging table and create an extra row - 
-- Where the duplicates will be stored. Then we can delete that row.

-- Go to layoffs_staging Table --> right click, copy to clipboard --> create statement -- > paste it 

CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` text,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` text,
  `row_num` INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Check new table
SELECT 
    *
FROM
    layoffs_staging2;

-- Insert data into new table
INSERT INTO layoffs_staging2
SELECT *, 
ROW_NUMBER() OVER(
PARTITION BY company, location, industry, total_laid_off, 
percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num 
FROM layoffs_staging;

-- Check that the same duplicates show up 
SELECT 
    *
FROM
    layoffs_staging2
WHERE row_num > 1;

-- Delete the entries where row_num > 1
DELETE
FROM
    layoffs_staging2
WHERE row_num > 1;

SELECT * FROM layoffs_staging2;

-- Standardizing Data: finding any issues and fixing them
SELECT company, TRIM(company)
FROM layoffs_staging2;

-- TRIM to remove any white space 
UPDATE layoffs_staging2
SET company = TRIM(company);

-- Checking on the Industry column 
SELECT DISTINCT industry
FROM layoffs_staging2
ORDER BY 1; -- 1 means 1st column, so Company.

-- Found multiple entries of same industry with different or variant names
SELECT *
FROM layoffs_staging2
WHERE industry LIKE 'Crypto%';

-- Use UPDATE to fix those entries in the Industry column. All industry entries 
-- that contain Crypto will now be labeed the same thing
UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%';

-- Final check
SELECT DISTINCT industry
FROM layoffs_staging2;

-- The columns Company and Industry have been cleaned. Lets move on to Location and Country
SELECT DISTINCT location 
FROM layoffs_staging2
ORDER BY 1;
-- Location seems fine 

SELECT DISTINCT country 
FROM layoffs_staging2
ORDER BY 1;
-- There are two entries for United States because one has a period at the end

SELECT *
FROM layoffs_staging2
WHERE country LIKE 'United States%'
ORDER BY 1;

-- Remove the period at the end of 'United States'
SELECT DISTINCT country, TRIM(TRAILING '.' FROM country)
FROM layoffs_staging2
ORDER BY 1;

-- Update country name in table 
UPDATE layoffs_staging2
SET country = TRIM(TRAILING '.' FROM country)
WHERE country LIKE 'United States%';

SELECT DISTINCT country 
FROM layoffs_staging2
ORDER BY 1;
-- All good 


-- Change DATE from TEXT to Date with String to Date. 
-- Format as month, day, year 

SELECT `date`
FROM layoffs_staging2;

SELECT `date`,
STR_TO_DATE(`date`, '%m/%d/%y')
FROM layoffs_staging2;

UPDATE layoffs_staging2
SET `date` = CASE
                WHEN `date` IS NOT NULL AND `date` <> 'None' THEN STR_TO_DATE(`date`, '%m/%d/%y')
                ELSE NULL
            END;

-- Change datatype of Table to modify the Date column 
ALTER TABLE layoffs_staging2
MODIFY COLUMN `date` DATE;
-- it worked. Date column has been modified. 

-- Null / Blank values 
SELECT 
    *
FROM
    layoffs_staging2;

-- In this database, some NULL values are represented with 'None'
-- We can either change them to NULL or type = 'None" to find them
-- Some NULLS are also just blank spaces so type '' to single them out

SELECT 
    *
FROM
    layoffs_staging2
WHERE
    industry = 'None';
-- One company shows up with 'None' for industry 

SELECT 
    *
FROM
    layoffs_staging2
WHERE
    industry = '';
-- Three companies show up with '' for industry 


-- Use a JOIN to populate the empty spaces in the Industry column.
-- Were joining the table with itself 
SELECT 
    *
FROM
    layoffs_staging2 t1
        JOIN
    layoffs_staging2 t2 ON t1.company = t2.company
WHERE
    (t1.industry = '' OR t1.industry IS NULL)
        AND t2.industry IS NOT NULL; 

-- UPDATE 
UPDATE layoffs_staging2 t1 
JOIN layoffs_staging2 t2 
	ON t1.company = t2.company
SET t1.industry = t2.industry
WHERE (t1.industry = '' OR t1.industry IS NULL)
        AND t2.industry IS NOT NULL;

-- Replace '' and 'None' values with NULL so the update will work
UPDATE layoffs_staging2 
SET industry = NULL 
WHERE industry = 'None';

UPDATE layoffs_staging2 
SET industry = NULL 
WHERE industry = '';

UPDATE layoffs_staging2 t1 
JOIN layoffs_staging2 t2 
	ON t1.company = t2.company
SET t1.industry = t2.industry
WHERE t1.industry IS NULL
        AND t2.industry IS NOT NULL;

-- Checking for any remaining NULLS
SELECT 
    *
FROM
    layoffs_staging2
WHERE
    industry IS NULL;
    
SELECT * FROM layoffs_staging2;


-- Replace None with NULL 
UPDATE layoffs_staging2 
SET total_laid_off = NULL 
WHERE total_laid_off = 'None';

UPDATE layoffs_staging2 
SET percentage_laid_off = NULL 
WHERE percentage_laid_off = 'None';


-- Removal of columns and rows 
SELECT 
    *
FROM
    layoffs_staging2
WHERE
    total_laid_off IS NULL
        AND percentage_laid_off IS NULL;

DELETE 
FROM
    layoffs_staging2
WHERE
    total_laid_off IS NULL
        AND percentage_laid_off IS NULL;

-- DROP the row_num as it is no longer needed 
SELECT 
    *
FROM
    layoffs_staging2;
    
ALTER TABLE layoffs_staging2
DROP COLUMN row_num;



SELECT * 
FROM world_layoffs.layoffs_staging2;










